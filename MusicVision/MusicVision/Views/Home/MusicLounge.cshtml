@{
    Layout = "~/Views/Shared/_LayoutLounge.cshtml";
    string artists = "";
    string trackLength;    
}
<div id="app" class="container">
    <div id="player"></div>
    @model List<MusicVision.Models.MusicLoungeModel>        
    <div class="text-center marginTop">
        <button class="btn btn-primary" v-on:click="toggleSelection()">
            <span class="glyphicon glyphicon-chevron-up" v-if="browsePlaylists" aria-hidden="true"></span>
            <span class="glyphicon glyphicon-chevron-down" v-if="!browsePlaylists" aria-hidden="true"></span>
        </button>
    </div>
    <div id="toggleArea" class="marginTop">
        <div class="col-md-8 col-md-offset-1 marginBottom"><input class="form-control col-md-4" id="searchInput" placeholder="Search for songs, artists, etc." /></div>
        <div class="text-center">
            <button class="btn btn-primary col-md-2" v-on:click="searchSong()">Search</button>
        </div>
        <div class=" playlistsScrollable col-md-3 col-md-offset-1">
            <div class="list-group">
                <a href="#" class="list-group-item active">
                    Playlists
                </a>
                @foreach (var playlist in Model)
                {
                    <a href="#" class="list-group-item" v-on:click="playlistClick(JSON.parse('@Json.Encode(@playlist.TrackList[0])'),'@playlist.Playlist.Uri','@playlist.Playlist.Name')">@playlist.Playlist.Name</a>
                }
            </div>
        </div>

        @foreach (var playlist in Model)
        {
            <div class="tracksScrollable col-md-7" v-if="activePlaylist=='@playlist.Playlist.Name'">
                <div class="list-group">
                    <a href="#" class="list-group-item active">
                        @playlist.Playlist.Name
                    </a>
                    @foreach (var track in playlist.TrackList)
                    {
                        artists = "";
                        foreach(var artist in track.Artists)
                        {
                            artists = artists + artist.Name + ", ";
                        }
                        artists = artists.Substring(0, artists.Length-2);
                        trackLength = "" + track.DurationMs / 60000 + ":" + (track.DurationMs % 60000).ToString();
                        
                        <a href="#" class="list-group-item" v-on:click="songClick(JSON.parse('@Json.Encode(@track)'),'@playlist.Playlist.Uri')">@track.Name - @artists <span class="pull-right">@trackLength</span></a>
                    }
                </div>
            </div>
        }
    </div>

    <footer class="container-fluid">
        <div class="col-md-3" v-if="songPlaying">
            <img :src="currentSongImage" height="64" width="64" />
            <div class="btn-group">
                <button type="button" v-on:click="playerClick('previous')" class="btn btn-default" aria-label="Previous Track"><span class="glyphicon glyphicon-step-backward" aria-hidden="true"></span></button>
                <button type="button" v-on:click="playerClick('play')" class="btn btn-default" aria-label="Play"><span class="glyphicon glyphicon-play" aria-hidden="true"></span></button>
                <button type="button" v-on:click="playerClick('pause')" class="btn btn-default" aria-label="Pause"><span class="glyphicon glyphicon-pause" aria-hidden="true"></span></button>
                <button type="button" v-on:click="playerClick('next')" class="btn btn-default" aria-label="Next Track"><span class="glyphicon glyphicon-step-forward" aria-hidden="true"></span></button>
            </div>
            <p>{{currentSongTitle}} by {{currentSongArtist}}</p>
        </div>
    </footer>
</div>

@*Vue.js - flexible client-side JS Framework https://vuejs.org/*@
<script src="https://unpkg.com/vue"></script>

<script>
    var app = new Vue({
        el: '#app',
        data: {
            songPlaying: false,
            browsePlaylists: true,
            currentSongImage: '',
            currentSongTitle: '',
            currentSongArtist: '',
            activePlaylist: ''
        },
        methods: {
            toggleSelection: function () {
                var self = this;
                $("#toggleArea").slideToggle("slow");
                self.browsePlaylists = !self.browsePlaylists;
            },
            playerClick: function (commandName) {
                $.ajax({
                    type: "POST",
                    url: "/Home/PlayerClick",
                    data: '{commandName:"' + commandName + '"}',
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    success: function (response) {
                        console.log('/Home/PlayerClick call succeeded.');
                    },
                    failure: function (response) {
                        console.log('/Home/PlayerClick call failed.');
                    },
                    error: function (response) {
                        console.log('/Home/PlayerClick call errored.');
                    }
                });
            },
            playlistClick: function (songData, playlistContext, playlistName) {
                var self = this;
                self.songPlaying = true;
                self.currentSongImage = songData["Album"]["Images"][2]["Url"];
                self.currentSongTitle = songData["Name"];
                self.currentSongArtist = songData["Artists"][0]["Name"];
                self.activePlaylist = playlistName;

                $.ajax({
                    type: "POST",
                    url: "/Home/InitializePlayer",
                    data: '{trackURI:"' + songData["Uri"] + '",playlistContext:"' + playlistContext + '"}',
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    success: function (response) {
                        console.log('/Home/InitializePlayer call succeeded.');
                    },
                    failure: function (response) {
                        console.log('/Home/InitializePlayer call failed.');
                    },
                    error: function (response) {
                        console.log('/Home/InitializePlayer call errored.');
                    }
                });
            },
            songClick: function (songData, playlistContext) {
                var self = this;
                self.songPlaying = true;
                self.currentSongImage = songData["Album"]["Images"][2]["Url"];
                self.currentSongTitle = songData["Name"];
                self.currentSongArtist = songData["Artists"][0]["Name"];
                
                $.ajax({
                    type: "POST",
                    url: "/Home/InitializePlayer",
                    data: '{trackURI:"' + songData["Uri"] + '",playlistContext:"' + playlistContext + '"}',
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    success: function (response) {
                        console.log('/Home/InitializePlayer call succeeded.');
                    },
                    failure: function (response) {
                        console.log('/Home/InitializePlayer call failed.');
                    },
                    error: function (response) {
                        console.log('/Home/InitializePlayer call errored.');
                    }
                });
            },
            searchSong: function () {
                var self = this;                
                var songTitle = $("#searchInput")[0].value;
                if (songTitle != '') {
                    $.ajax({
                        type: "POST",
                        url: "/Home/SongSearch",
                        data: '{trackName:"' + songTitle + '"}',
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        success: function (response) {                            
                            if (response != 'Track not found.') {
                                self.songPlaying = true;
                                self.currentSongImage = response["Album"]["Images"][2]["Url"];
                                self.currentSongTitle = response["Name"];
                                self.currentSongArtist = response["Artists"][0]["Name"];
                            }
                            else {
                                console.log(response);
                            }
                            console.log('/Home/SongSearch call succeeded.');
                        },
                        failure: function (response) {
                            console.log('/Home/SongSearch call failed.');
                        },
                        error: function (response) {
                            console.log('/Home/SongSearch call errored.');
                        }
                    });
                }                
            },
            getCurrentTrack: function () {

            },
            previousTrack: function () {
                playerClick('previous');
            },
            nextTrack: function () {
                playerClick('next');
            },
            play: function () {
                playerClick('play');
            },
            pause: function () {
                playerClick('pause');
            }
        },
        mounted() {

        }
    })

</script>

<script>
    // 2. This code loads the IFrame Player API code asynchronously.
    var tag = document.createElement('script');

    tag.src = "https://www.youtube.com/iframe_api";
    var firstScriptTag = document.getElementsByTagName('script')[0];
    firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

    // 3. This function creates an <iframe> (and YouTube player)
    //    after the API code downloads.
    var player;
    function onYouTubeIframeAPIReady() {
        player = new YT.Player('player', {
            height: window.innerHeight/2,
            width: window.innerWidth/2,
            videoId: '',
            events: {
                'onReady': onPlayerReady,
                'onStateChange': onPlayerStateChange
            }
        });
    }

    // 4. The API will call this function when the video player is ready.
    function onPlayerReady(event) {
        event.target.playVideo();
    }

    // 5. The API calls this function when the player's state changes.
    //    The function indicates that when playing a video (state=1),
    //    the player should play for six seconds and then stop.
    var done = false;
    function onPlayerStateChange(event) {
    }
    function stopVideo() {
        player.stopVideo();
    }
</script>