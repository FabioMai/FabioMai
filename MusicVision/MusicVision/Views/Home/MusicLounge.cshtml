@{
    Layout = "~/Views/Shared/_LayoutLounge.cshtml";
    string artists = "";
    string trackLength;
}
<div id="app" class="container">
    <div style="position: fixed; left: 0; z-index: -99; width: 100%; height: 100%">
        <div id="player"></div>
    </div>
    @model List<MusicVision.Models.MusicLoungeModel>
    <div class="text-center marginTop">
        <button class="btn btn-primary" v-on:click="toggleSelection()">
            <span class="glyphicon glyphicon-chevron-up" v-if="browsePlaylists" aria-hidden="true"></span>
            <span class="glyphicon glyphicon-chevron-down" v-if="!browsePlaylists" aria-hidden="true"></span>
        </button>
    </div>
    <div id="toggleArea" class="marginTop">
        <div class="col-md-8 col-md-offset-1 marginBottom"><input class="form-control col-md-4" id="searchInput" placeholder="Search for songs, artists, etc." /></div>
        <div class="text-center">
            <button class="btn btn-primary col-md-2" v-on:click="searchSong()">Search</button>
        </div>
        <div class=" playlistsScrollable col-md-3 col-md-offset-1">
            <div class="list-group">
                <a href="#" class="list-group-item active">
                    Playlists
                </a>
                @foreach (var playlist in Model)
                {
                    <a href="#" class="list-group-item" v-on:click="playlistClick(JSON.parse('@Json.Encode(@playlist.TrackList[0])'),'@playlist.Playlist.Uri','@playlist.Playlist.Name')">@playlist.Playlist.Name</a>
                }
            </div>
        </div>

        @foreach (var playlist in Model)
            {
            <div class="tracksScrollable col-md-7" v-if="activePlaylist=='@playlist.Playlist.Name'">
                <div class="list-group">
                    <a href="#" class="list-group-item active">
                        @playlist.Playlist.Name
                    </a>
                    @foreach (var track in playlist.TrackList)
                    {
                        artists = "";
                        foreach (var artist in track.Artists)
                        {
                            artists = artists + artist.Name + ", ";
                        }
                        artists = artists.Substring(0, artists.Length - 2);
                        trackLength = "" + track.DurationMs / 60000 + ":" + (track.DurationMs % 60000).ToString().PadLeft(5, '0').Substring(0, 2);

                        <a href="#" class="list-group-item" v-on:click="songClick(JSON.parse('@Json.Encode(@track)'),'@playlist.Playlist.Uri')">@track.Name - @artists <span class="pull-right">@trackLength</span></a>
                    }
                </div>
            </div>
        }
    </div>

    <footer class="container-fluid">
        <div class="col-md-3" v-if="songPlaying" style="border-radius: 10px;">
            <img :src="currentSongImage" height="64" width="64" style="margin-left: 25px;"/>
            <div class="btn-group">
                <button type="button" v-on:click="playerClick('previous')" class="btn btn-default" aria-label="Previous Track"><span class="glyphicon glyphicon-step-backward" aria-hidden="true"></span></button>
                <button type="button" v-on:click="playerClick('play')" class="btn btn-default" aria-label="Play"><span class="glyphicon glyphicon-play" aria-hidden="true"></span></button>
                <button type="button" v-on:click="playerClick('pause')" class="btn btn-default" aria-label="Pause"><span class="glyphicon glyphicon-pause" aria-hidden="true"></span></button>
                <button type="button" v-on:click="playerClick('next')" class="btn btn-default" aria-label="Next Track"><span class="glyphicon glyphicon-step-forward" aria-hidden="true"></span></button>
            </div>
            <p style="margin-left: 25px; color: white; background-color: black; border-radius: 10px">{{currentSongTitle}} by {{currentSongArtist}}</p>
        </div>
    </footer>
</div>

@*Vue.js - flexible client-side JS Framework https://vuejs.org/*@
<script src="https://unpkg.com/vue"></script>

<script>
    var spotifyApi;
    $(document).ready(function () {
        if (window.location.href.indexOf('#') > -1)
            window.location.href = window.location.href.replace('#', '?');
        var accessToken = window.location.href.substring
        spotifyApi = new SpotifyWebApi();
        spotifyApi.setAccessToken(window.location.href.substring(window.location.href.indexOf('token=') + 6, window.location.href.indexOf('&token_type')));
        spotifyApi.getUserPlaylists('jmperezperez')
            .then(function (data) {
                console.log('User playlists', data);
            }, function (err) {
                console.error(err);
            });
    });

    function googleApiClientReady() {
        var apiKey = 'AIzaSyDOnBYq0e7B9PdH9JOaC0EdKFew2ZsDjTw';

        gapi.client.setApiKey(apiKey);
        gapi.client.load('youtube', 'v3', function () {
            isLoad = true;
        });
    }

    function getMatch(songName, songArtist) {
        var match
        request = gapi.client.youtube.search.list({
            maxResults: 1,
            q: songArtist + ' ' + songName,
            part: 'snippet'
        });
        request.execute(function (response) {
            resultItems = response.result.items[0]["id"]["videoId"];
            player.loadVideoById({
                'videoId': resultItems,
                'startSeconds': 5,
                'suggestedQuality': 'large'
            });
        });
    }

    var tag = document.createElement('script');

    tag.src = "https://www.youtube.com/iframe_api";
    var firstScriptTag = document.getElementsByTagName('script')[0];
    firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

    // 3. This function creates an <iframe> (and YouTube player)
    //    after the API code downloads.
    var player;
    function onYouTubeIframeAPIReady() {
        player = new YT.Player('player', {
            height: window.innerHeight,
            width: window.innerWidth,
            videoId: 't6jlhqNxRYk',
            playerVars: {
                autoplay: 1,
                controls: 0,
                disablekb: 1,
                showinfo: 0
            },
            events: {
                'onReady': onPlayerReady,
                'onStateChange': onPlayerStateChange
            }
        });
    }

    // 4. The API will call this function when the video player is ready.
    function onPlayerReady(event) {
        event.target.playVideo();
        player.mute()
    }

    // 5. The API calls this function when the player's state changes.
    //    The function indicates that when playing a video (state=1),
    //    the player should play for six seconds and then stop.
    var done = false;
    function onPlayerStateChange(event) {
    }
    function stopVideo() {
        player.stopVideo();
    }

    var app = new Vue({
        el: '#app',
        data: {
            songPlaying: false,
            browsePlaylists: true,
            currentSongImage: '',
            currentSongTitle: '',
            currentSongArtist: '',
            activePlaylist: ''
        },
        methods: {
            toggleSelection: function () {
                var self = this;
                $("#toggleArea").slideToggle("slow");
                self.browsePlaylists = !self.browsePlaylists;
            },
            playerClick: function (commandName) {
                
                if (commandName == "play") {
                    player.playVideo();
                    spotifyApi.play({}, function (err, data) {
                        if (err) console.error(err);
                        else {
                            spotifyApi.getMyCurrentPlayingTrack({}, function (err, data) {
                                if (err) console.error(err);
                                else {
                                    console.log(data);
                                    self.currentSongImage = data["item"]["album"]["images"][2]["url"];
                                    self.currentSongTitle = data["item"]["name"];
                                    self.currentSongArtist = data["item"]["artists"][0]["name"];
                                }
                            });
                        }
                    });
                }
                else if (commandName == "pause") {
                    player.pauseVideo();
                    spotifyApi.pause({}, function (err, data) {
                        if (err) console.error(err);
                        else {
                            spotifyApi.getMyCurrentPlayingTrack({}, function (err, data) {
                                if (err) console.error(err);
                                else {
                                    console.log(data);
                                    self.currentSongImage = data["item"]["album"]["images"][2]["url"];
                                    self.currentSongTitle = data["item"]["name"];
                                    self.currentSongArtist = data["item"]["artists"][0]["name"];
                                }
                            });
                        }
                    });
                }
                else if (commandName == "next") {                    
                    spotifyApi.skipToNext({}, function (err, data) {
                        if (err) console.error(err);
                        else {
                            spotifyApi.getMyCurrentPlayingTrack({}, function (err,data) {
                                if (err) console.error(err);
                                else {
                                    console.log(data);
                                    self.currentSongImage = data["item"]["album"]["images"][2]["url"];
                                    self.currentSongTitle = data["item"]["name"];
                                    self.currentSongArtist = data["item"]["artists"][0]["name"];
                                    getMatch(self.currentSongTitle, self.currentSongArtist);
                                    player.playVideo();
                                }
                            });
                        }
                    });
                }
                else if (commandName == "previous") {                    
                    spotifyApi.skipToPrevious({}, function (err, data) {
                        if (err) console.error(err);
                        else {
                            spotifyApi.getMyCurrentPlayingTrack({}, function (err, data) {
                                if (err) console.error(err);
                                else {
                                    console.log(data);
                                    self.currentSongImage = data["item"]["album"]["images"][2]["url"];
                                    self.currentSongTitle = data["item"]["name"];
                                    self.currentSongArtist = data["item"]["artists"][0]["name"];
                                    getMatch(self.currentSongTitle, self.currentSongArtist);
                                    player.playVideo();
                                }
                            });
                        }
                    });
                }
            },
            playlistClick: function (songData, playlistContext, playlistName) {
                var self = this;
                self.songPlaying = true;
                self.currentSongImage = songData["Album"]["Images"][2]["Url"];
                self.currentSongTitle = songData["Name"];
                self.currentSongArtist = songData["Artists"][0]["Name"];
                self.activePlaylist = playlistName;
                getMatch(self.currentSongTitle, self.currentSongArtist);

                spotifyApi.play({ context_uri: playlistContext}, function (err, data) {
                    if (err) console.error(err);
                    else { console.log("success!"); console.log(data); }
                    console.log(playlistContext);
                });                
            },
            songClick: function (songData, playlistContext) {
                var self = this;
                self.songPlaying = true;
                self.currentSongImage = songData["Album"]["Images"][2]["Url"];
                self.currentSongTitle = songData["Name"];
                self.currentSongArtist = songData["Artists"][0]["Name"];
                getMatch(self.currentSongTitle, self.currentSongArtist);

                spotifyApi.play({ context_uri: playlistContext }, function (err, data) {
                    if (err) console.error(err);
                    else { console.log("success!"); console.log(data); }
                    console.log(playlistContext);
                });                
            },
            searchSong: function () {
                var self = this;
                var songTitle = $("#searchInput")[0].value;
                if (songTitle != '') {
                    $.ajax({
                        type: "POST",
                        url: "/Home/SongSearch",
                        data: '{trackName:"' + songTitle + '"}',
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        success: function (response) {
                            if (response != 'Track not found.') {
                                self.songPlaying = true;
                                self.currentSongImage = response["Album"]["Images"][2]["Url"];
                                self.currentSongTitle = response["Name"];
                                self.currentSongArtist = response["Artists"][0]["Name"];
                                getMatch(self.currentSongTitle, self.currentSongArtist);
                                player.playVideo();
                                console.log(response);

                                spotifyApi.play({ context_uri: response["Uri"] }, function (err, data) {
                                    if (err) console.error(err);
                                    else { console.log("success!"); console.log(data); }
                                    console.log(playlistContext);
                                });
                            }
                            else {
                                console.log(response);
                            }
                            console.log('/Home/SongSearch call succeeded.');
                        },
                        failure: function (response) {
                            console.log('/Home/SongSearch call failed.');
                        },
                        error: function (response) {
                            console.log('/Home/SongSearch call errored.');
                        }
                    });
                }
            },
            getCurrentTrack: function () {

            },
            previousTrack: function () {
                playerClick('previous');
            },
            nextTrack: function () {
                playerClick('next');
            },
            play: function () {
                playerClick('play');
                player.playVideo();
            },
            pause: function () {
                playerClick('pause');
                player.pauseVideo();
            }
        },
        mounted() {

        }
    })
   
</script>

<script src="https://apis.google.com/js/client.js?onload=googleApiClientReady"></script>